@startuml
title BME280 Raspberry Pi Sensor Library - Class Diagram

skinparam class {
    BackgroundColor #f8f8f8
    ArrowColor #333
    BorderColor #555
}

'--- Classes ---
class "BME280" {
    - std::unique_ptr<I2CDevice> dev
    - uint8_t i2caddress
    - calibration data...
    - float lastTemperature
    - float lastHumidity
    - float lastPressure
    - int32_t t_fine
    --
    + BME280()
    + bool begin(uint8_t addr = 0x76, int bus = 1)
    + float readTemperature()
    + float readPressure()
    + float readHumidity()
    --
    - void readCalibration()
    - uint8_t  read8(uint8_t reg)
    - uint16_t read16(uint8_t reg)
    - int16_t  readS16(uint8_t reg)
    - void     write8(uint8_t reg, uint8_t value)
}

class "I2CDevice" {
    - int file
    - uint8_t addr
    --
    + I2CDevice(int bus, uint8_t address)
    + ~I2CDevice()
    + uint8_t  read8(uint8_t reg)
    + uint16_t read16(uint8_t reg)
    + uint16_t read16_LE(uint8_t reg)
    + int16_t  readS16(uint8_t reg)
    + int16_t  readS16_LE(uint8_t reg)
    + void     write8(uint8_t reg, uint8_t value)
}

class "mqtt::async_client" as MQTT {
    + connect(connOpts)
    + publish(msg)
    + disconnect()
}

class "main.cpp" as Main {
    + int main()
    + void publishData(mqtt::async_client&, float, float, float)
}

'--- Relationships ---
Main --> BME280 : uses
BME280 *-- I2CDevice : composition
Main --> MQTT : uses

@enduml